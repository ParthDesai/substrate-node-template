
//! Autogenerated weights for `pallet_club`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-09, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Parths-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_club
// --extrinsic
// *
// --steps
// 20
// --repeat
// 20
// --output
// pallets/club/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions needed for pallet_template.
pub trait WeightInfo {
	fn create_club() -> Weight;
	fn transfer_club_ownership() -> Weight;
	fn change_club_expense() -> Weight;
	fn request_membership() -> Weight;
	fn request_membership_renewal() -> Weight;
	fn add_member() -> Weight;
	fn on_initialize(x: u32) -> Weight;
}

/// Weight functions for `pallet_club`.
pub struct ClubWeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for ClubWeightInfo<T> {
	/// Storage: Club RootAccount (r:1 w:0)
	/// Proof: Club RootAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Club NextClubId (r:1 w:1)
	/// Proof: Club NextClubId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Club ClubCreationFee (r:1 w:0)
	/// Proof: Club ClubCreationFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Club Clubs (r:0 w:1)
	/// Proof: Club Clubs (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	fn create_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200`
		//  Estimated: `3593`
		// Minimum execution time: 105_000_000 picoseconds.
		Weight::from_parts(107_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Club Clubs (r:1 w:1)
	/// Proof: Club Clubs (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	fn transfer_club_ownership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `3521`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3521))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Club Clubs (r:1 w:1)
	/// Proof: Club Clubs (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	fn change_club_expense() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `3521`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3521))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Club Clubs (r:1 w:0)
	/// Proof: Club Clubs (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Club MembershipRequest (r:1 w:1)
	/// Proof: Club MembershipRequest (max_values: None, max_size: Some(58), added: 2533, mode: MaxEncodedLen)
	/// Storage: Club ClubMembership (r:1 w:0)
	/// Proof: Club ClubMembership (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Club ExpiredMemberships (r:1 w:0)
	/// Proof: Club ExpiredMemberships (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn request_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `376`
		//  Estimated: `3593`
		// Minimum execution time: 96_000_000 picoseconds.
		Weight::from_parts(98_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Club Clubs (r:1 w:0)
	/// Proof: Club Clubs (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Club MembershipRequest (r:1 w:1)
	/// Proof: Club MembershipRequest (max_values: None, max_size: Some(58), added: 2533, mode: MaxEncodedLen)
	/// Storage: Club ClubMembership (r:1 w:0)
	/// Proof: Club ClubMembership (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Club ExpiredMemberships (r:1 w:1)
	/// Proof: Club ExpiredMemberships (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn request_membership_renewal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386`
		//  Estimated: `3593`
		// Minimum execution time: 99_000_000 picoseconds.
		Weight::from_parts(100_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Club Clubs (r:1 w:0)
	/// Proof: Club Clubs (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Club MembershipRequest (r:1 w:1)
	/// Proof: Club MembershipRequest (max_values: None, max_size: Some(58), added: 2533, mode: MaxEncodedLen)
	/// Storage: Club ExpirationsPerBlock (r:1 w:1)
	/// Proof: Club ExpirationsPerBlock (max_values: None, max_size: Some(12), added: 2487, mode: MaxEncodedLen)
	/// Storage: Club ClubMemberFutureExpirations (r:0 w:1)
	/// Proof: Club ClubMemberFutureExpirations (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Club ClubMembership (r:0 w:1)
	/// Proof: Club ClubMembership (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250`
		//  Estimated: `3523`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3523))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Club ExpirationsPerBlock (r:1 w:1)
	/// Proof: Club ExpirationsPerBlock (max_values: None, max_size: Some(12), added: 2487, mode: MaxEncodedLen)
	/// Storage: Club ClubMemberFutureExpirations (r:10000 w:10000)
	/// Proof: Club ClubMemberFutureExpirations (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Club ClubMembership (r:10000 w:10000)
	/// Proof: Club ClubMembership (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Club ExpiredMemberships (r:0 w:10000)
	/// Proof: Club ExpiredMemberships (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 10000]`.
	fn on_initialize(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1706 + x * (98 ±0)`
		//  Estimated: `3477 + x * (2527 ±0)`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(35_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3477))
			// Standard Error: 89_179
			.saturating_add(Weight::from_parts(31_040_734, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2527).saturating_mul(x.into()))
	}
}
